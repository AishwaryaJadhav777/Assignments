using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LambdaExpression
{
   // public delegate string NameDelegate(string str);
   // public delegate double AddNumDelegate1(int x, float y, double z);
   // //------------------------------------------------------------------------//
   // public delegate void AddNum2Delegate2(int x, float y, double z);
   // public delegate void PrintTableDelegate(int n);
   // //-----------------------------------------------------------------------//
   // public delegate bool CheckLengthDelegate(string str);
   // public delegate bool ChechEvenDelegate(int a);
   // public delegate bool CheckLowerDelegate(string str);
   // public delegate bool CheckUpperDelegate(string str);

    class Program
    {
 
        static void Main(string[] args)
        {
            //Instantiate the delegate
            //Func delegate
            Func<string, string> f1 = (name) => name;
            string str = f1.Invoke("Dev");
            Console.WriteLine(str);

            Func<int, float, double, double> obj = (x, y, z) => x + y + z;//new variable to store the value-return type
            double result = obj.Invoke(10, 3.142f, 12345.12345);
            Console.WriteLine(result);

           
           //Action delegate
            Action<int> ac = (i) => Console.WriteLine(i);
            ac(100);

            Action<string> pt = name => Console.WriteLine(name);
            pt("Shivani");

            Action<int, float, double> obj1 = (x, y, z) => Console.WriteLine(x + y + z);
            obj1.Invoke(10, 3.142f, 12345.31243);




            //Predicate delegate 
            Predicate<string> obj2 = (name) =>
            {
                if (name.Length > 4)
                    return true;
                return false;
            };
            bool check = obj2.Invoke("Aishu");
            Console.WriteLine(check);


            
            Predicate<int> obj3 = (num) =>
              {
                  if (num % 2 == 0)
                      return true;
                  return false;
              };
            bool check1 = obj3.Invoke(12);
            Console.WriteLine(check1);


            Predicate<string> obj4 = s => s.Equals(s.ToLower());
            bool result1 = obj4.Invoke("hello");
            Console.WriteLine(result1);


            Predicate<string> obj5 = s => s.Equals(s.ToUpper());
            bool result2 = obj5.Invoke("HELLO");
            Console.WriteLine(result2);

            Console.ReadLine();

        }
    }
}
